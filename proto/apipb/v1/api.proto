syntax = "proto3";

package proto.apipb.v1;

option go_package = "github.com/aqaurius6666/clean-go/pkg/proto/apipb/v1;apipb";

import "google/api/annotations.proto";
import "validate/validate.proto";
import "gogoproto/gogo.proto";
import "proto/entitypb/v1/entity.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "Clean-go API";
        version: "1.0";
        description: "Sample api";
        contact: {
            name: "Vu Nguyen";
            email: "aqaurius6666@gmail.com";
        };
    };
    base_path: "/api/v1";
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    security_definitions: {
        security: {
            key: "api_key";
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "Authorization";
            };
        };
    }
};

service ApiService {
    rpc RegisterPost(RegisterPostRequest) returns (RegisterPostResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/register"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Auth";
        };
    }
    rpc LoginPost(LoginPostRequest) returns (LoginPostResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/login"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Auth";
        };
    }
    rpc RefreshPost(RefreshPostRequest) returns (RefreshPostResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/refresh"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Auth";
        };
    }

    rpc MeGet(MeGetRequest) returns (MeGetResponse) {
        option (google.api.http) = {
            get: "/api/v1/users/me"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Users";
            security: {
                security_requirement: {
                    key: "api_key"
                }
            }
        };
    }

    rpc MePut(MePutRequest) returns (MePutResponse) {
        option (google.api.http) = {
            put: "/api/v1/users/me"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Users";
            security: {
                security_requirement: {
                    key: "api_key"
                }
            }
        };
    }

    rpc PostsPost(PostsPostRequest) returns (PostsPostResponse) {
        option (google.api.http) = {
            post: "/api/v1/posts"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Posts";
            security: {
                security_requirement: {
                    key: "api_key"
                }
            }
        };
    }
    rpc PostsMeGet(PostsMeGetRequest) returns (PostsMeGetResponse) {
        option (google.api.http) = {
            get: "/api/v1/posts/me"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Posts";
            security: {
                security_requirement: {
                    key: "api_key"
                }
            }
        };
    }
}

message RegisterPostRequest {
    string email = 1 [(validate.rules).string.email = true];
    string password = 3 [(validate.rules).string.min_len = 6];
}

message RegisterPostResponse {
    string id = 1;
    string email = 2;
}

message LoginPostRequest {
    string email = 1 [(validate.rules).string.email = true];
    string password = 2 [(validate.rules).string.min_len = 6];
}

message LoginPostResponse {
    string id = 1;
    string accessToken = 2;
    string refreshToken = 3;
    int64 expiresAt = 4;
}

message RefreshPostRequest {
    string refresh_token = 1 [
        (validate.rules).string = {
            pattern: "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_\\-\\+\\/=]*)"
        }
    ];
}

message RefreshPostResponse {
    string accessToken = 1;
    string refreshToken = 2;
    int64 expiresAt = 3;
}

message MeGetRequest {
    string _id = 1 [
        (gogoproto.jsontag) = "-"
    ];
}

message MeGetResponse {
    string id = 1;
    string email = 2;
    string name = 3;
}

message MePutRequest {
    string _id = 1 [
        (gogoproto.jsontag) = "-"
    ];
    string name = 2 [
        (validate.rules).string = {
            min_len: 3
            max_len: 50
            // ignore_empty: true
            
        }
    ];
}

message MePutResponse {
    string id = 1;
    string email = 2;
    string name = 3;
}

message PostsPostRequest {
    string title = 1 [
        (validate.rules).string = {
            min_len: 3
            max_len: 50
        }
    ];
    string content = 2 [
        (validate.rules).string = {
            min_len: 3
            max_len: 500
        }
    ];
    string _id = 3 [
        (gogoproto.jsontag) = "-"
    ];
}

message PostsPostResponse {
    string id = 1;
    string title = 2;
    string content = 3;
    string creatorId = 4;
}

message PostsMeGetRequest {
    string _id = 1 [
        (gogoproto.jsontag) = "-",
        (gogoproto.moretags) = "form:\"-\""
    ];
    proto.entitypb.v1.Pagination pagination = 2;
}

message PostsMeGetResponse {
    message Post {
        string id = 1;
        string title = 2;
        string content = 3;
        string creatorId = 4;
    }
    repeated Post results = 1;
    proto.entitypb.v1.Pagination pagination = 2;
}