// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/aqaurius6666/clean-go/internal/entities"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Usecases is an autogenerated mock type for the Usecases type
type Usecases struct {
	mock.Mock
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *Usecases) GetUser(ctx context.Context, id uuid.UUID) (*entities.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entities.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUsecases interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsecases creates a new instance of Usecases. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsecases(t mockConstructorTestingTNewUsecases) *Usecases {
	mock := &Usecases{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
