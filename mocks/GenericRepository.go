// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gentity "github.com/aqaurius6666/clean-go/pkg/gentity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// GenericRepository is an autogenerated mock type for the GenericRepository type
type GenericRepository[T gentity.E] struct {
	mock.Mock
}

// GetEntityById provides a mock function with given fields: ctx, id
func (_m *GenericRepository[T]) GetEntityById(ctx context.Context, id uuid.UUID) (T, error) {
	ret := _m.Called(ctx, id)

	var r0 T
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) T); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(T)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGenericRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewGenericRepository creates a new instance of GenericRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGenericRepository[T gentity.E](t mockConstructorTestingTNewGenericRepository) *GenericRepository[T] {
	mock := &GenericRepository[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
