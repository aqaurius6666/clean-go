// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/api/v1/api.proto

package apipb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _api_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on UserEntity with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserEntity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserEntity with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserEntityMultiError, or
// nil if none found.
func (m *UserEntity) ValidateAll() error {
	return m.validate(true)
}

func (m *UserEntity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return UserEntityMultiError(errors)
	}

	return nil
}

// UserEntityMultiError is an error wrapping multiple validation errors
// returned by UserEntity.ValidateAll() if the designated constraints aren't met.
type UserEntityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserEntityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserEntityMultiError) AllErrors() []error { return m }

// UserEntityValidationError is the validation error returned by
// UserEntity.Validate if the designated constraints aren't met.
type UserEntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserEntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserEntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserEntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserEntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserEntityValidationError) ErrorName() string { return "UserEntityValidationError" }

// Error satisfies the builtin error interface
func (e UserEntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserEntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserEntityValidationError{}

// Validate checks the field values on GetEntityRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetEntityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEntityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEntityRequestMultiError, or nil if none found.
func (m *GetEntityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEntityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != "" {

		if err := m._validateUuid(m.GetId()); err != nil {
			err = GetEntityRequestValidationError{
				field:  "Id",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

	}

	if m.GetLimit() != 0 {

	}

	if len(errors) > 0 {
		return GetEntityRequestMultiError(errors)
	}

	return nil
}

func (m *GetEntityRequest) _validateUuid(uuid string) error {
	if matched := _api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetEntityRequestMultiError is an error wrapping multiple validation errors
// returned by GetEntityRequest.ValidateAll() if the designated constraints
// aren't met.
type GetEntityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEntityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEntityRequestMultiError) AllErrors() []error { return m }

// GetEntityRequestValidationError is the validation error returned by
// GetEntityRequest.Validate if the designated constraints aren't met.
type GetEntityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEntityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEntityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEntityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEntityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEntityRequestValidationError) ErrorName() string { return "GetEntityRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetEntityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEntityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEntityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEntityRequestValidationError{}

// Validate checks the field values on GetEntityResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetEntityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEntityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEntityResponseMultiError, or nil if none found.
func (m *GetEntityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEntityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetEntityResponseValidationError{
					field:  "Entity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetEntityResponseValidationError{
					field:  "Entity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEntityResponseValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEntities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEntityResponseValidationError{
						field:  fmt.Sprintf("Entities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEntityResponseValidationError{
						field:  fmt.Sprintf("Entities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEntityResponseValidationError{
					field:  fmt.Sprintf("Entities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetEntityResponseMultiError(errors)
	}

	return nil
}

// GetEntityResponseMultiError is an error wrapping multiple validation errors
// returned by GetEntityResponse.ValidateAll() if the designated constraints
// aren't met.
type GetEntityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEntityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEntityResponseMultiError) AllErrors() []error { return m }

// GetEntityResponseValidationError is the validation error returned by
// GetEntityResponse.Validate if the designated constraints aren't met.
type GetEntityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEntityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEntityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEntityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEntityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEntityResponseValidationError) ErrorName() string {
	return "GetEntityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEntityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEntityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEntityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEntityResponseValidationError{}
