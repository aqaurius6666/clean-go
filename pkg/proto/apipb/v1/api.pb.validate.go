// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/apipb/v1/api.proto

package apipb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterPostRequestMultiError, or nil if none found.
func (m *RegisterPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = RegisterPostRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 6 {
		err := RegisterPostRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterPostRequestMultiError(errors)
	}

	return nil
}

func (m *RegisterPostRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *RegisterPostRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// RegisterPostRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterPostRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterPostRequestMultiError) AllErrors() []error { return m }

// RegisterPostRequestValidationError is the validation error returned by
// RegisterPostRequest.Validate if the designated constraints aren't met.
type RegisterPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterPostRequestValidationError) ErrorName() string {
	return "RegisterPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterPostRequestValidationError{}

// Validate checks the field values on RegisterPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterPostResponseMultiError, or nil if none found.
func (m *RegisterPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Email

	if len(errors) > 0 {
		return RegisterPostResponseMultiError(errors)
	}

	return nil
}

// RegisterPostResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterPostResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterPostResponseMultiError) AllErrors() []error { return m }

// RegisterPostResponseValidationError is the validation error returned by
// RegisterPostResponse.Validate if the designated constraints aren't met.
type RegisterPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterPostResponseValidationError) ErrorName() string {
	return "RegisterPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterPostResponseValidationError{}

// Validate checks the field values on LoginPostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginPostRequestMultiError, or nil if none found.
func (m *LoginPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = LoginPostRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 6 {
		err := LoginPostRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginPostRequestMultiError(errors)
	}

	return nil
}

func (m *LoginPostRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *LoginPostRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// LoginPostRequestMultiError is an error wrapping multiple validation errors
// returned by LoginPostRequest.ValidateAll() if the designated constraints
// aren't met.
type LoginPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginPostRequestMultiError) AllErrors() []error { return m }

// LoginPostRequestValidationError is the validation error returned by
// LoginPostRequest.Validate if the designated constraints aren't met.
type LoginPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginPostRequestValidationError) ErrorName() string { return "LoginPostRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginPostRequestValidationError{}

// Validate checks the field values on LoginPostResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginPostResponseMultiError, or nil if none found.
func (m *LoginPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	// no validation rules for ExpiresAt

	if len(errors) > 0 {
		return LoginPostResponseMultiError(errors)
	}

	return nil
}

// LoginPostResponseMultiError is an error wrapping multiple validation errors
// returned by LoginPostResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginPostResponseMultiError) AllErrors() []error { return m }

// LoginPostResponseValidationError is the validation error returned by
// LoginPostResponse.Validate if the designated constraints aren't met.
type LoginPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginPostResponseValidationError) ErrorName() string {
	return "LoginPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LoginPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginPostResponseValidationError{}

// Validate checks the field values on RefreshPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshPostRequestMultiError, or nil if none found.
func (m *RefreshPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_RefreshPostRequest_RefreshToken_Pattern.MatchString(m.GetRefreshToken()) {
		err := RefreshPostRequestValidationError{
			field:  "RefreshToken",
			reason: "value does not match regex pattern \"^([a-zA-Z0-9_=]+)\\\\.([a-zA-Z0-9_=]+)\\\\.([a-zA-Z0-9_\\\\-\\\\+\\\\/=]*)\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RefreshPostRequestMultiError(errors)
	}

	return nil
}

// RefreshPostRequestMultiError is an error wrapping multiple validation errors
// returned by RefreshPostRequest.ValidateAll() if the designated constraints
// aren't met.
type RefreshPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshPostRequestMultiError) AllErrors() []error { return m }

// RefreshPostRequestValidationError is the validation error returned by
// RefreshPostRequest.Validate if the designated constraints aren't met.
type RefreshPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshPostRequestValidationError) ErrorName() string {
	return "RefreshPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshPostRequestValidationError{}

var _RefreshPostRequest_RefreshToken_Pattern = regexp.MustCompile("^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_\\-\\+\\/=]*)")

// Validate checks the field values on RefreshPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshPostResponseMultiError, or nil if none found.
func (m *RefreshPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	// no validation rules for ExpiresAt

	if len(errors) > 0 {
		return RefreshPostResponseMultiError(errors)
	}

	return nil
}

// RefreshPostResponseMultiError is an error wrapping multiple validation
// errors returned by RefreshPostResponse.ValidateAll() if the designated
// constraints aren't met.
type RefreshPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshPostResponseMultiError) AllErrors() []error { return m }

// RefreshPostResponseValidationError is the validation error returned by
// RefreshPostResponse.Validate if the designated constraints aren't met.
type RefreshPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshPostResponseValidationError) ErrorName() string {
	return "RefreshPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshPostResponseValidationError{}

// Validate checks the field values on MeGetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MeGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MeGetRequestMultiError, or
// nil if none found.
func (m *MeGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MeGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XId

	if len(errors) > 0 {
		return MeGetRequestMultiError(errors)
	}

	return nil
}

// MeGetRequestMultiError is an error wrapping multiple validation errors
// returned by MeGetRequest.ValidateAll() if the designated constraints aren't met.
type MeGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeGetRequestMultiError) AllErrors() []error { return m }

// MeGetRequestValidationError is the validation error returned by
// MeGetRequest.Validate if the designated constraints aren't met.
type MeGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeGetRequestValidationError) ErrorName() string { return "MeGetRequestValidationError" }

// Error satisfies the builtin error interface
func (e MeGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeGetRequestValidationError{}

// Validate checks the field values on MeGetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MeGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeGetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MeGetResponseMultiError, or
// nil if none found.
func (m *MeGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MeGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Email

	// no validation rules for Name

	if len(errors) > 0 {
		return MeGetResponseMultiError(errors)
	}

	return nil
}

// MeGetResponseMultiError is an error wrapping multiple validation errors
// returned by MeGetResponse.ValidateAll() if the designated constraints
// aren't met.
type MeGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeGetResponseMultiError) AllErrors() []error { return m }

// MeGetResponseValidationError is the validation error returned by
// MeGetResponse.Validate if the designated constraints aren't met.
type MeGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeGetResponseValidationError) ErrorName() string { return "MeGetResponseValidationError" }

// Error satisfies the builtin error interface
func (e MeGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeGetResponseValidationError{}

// Validate checks the field values on MePutRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MePutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MePutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MePutRequestMultiError, or
// nil if none found.
func (m *MePutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MePutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XId

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 50 {
		err := MePutRequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MePutRequestMultiError(errors)
	}

	return nil
}

// MePutRequestMultiError is an error wrapping multiple validation errors
// returned by MePutRequest.ValidateAll() if the designated constraints aren't met.
type MePutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MePutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MePutRequestMultiError) AllErrors() []error { return m }

// MePutRequestValidationError is the validation error returned by
// MePutRequest.Validate if the designated constraints aren't met.
type MePutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MePutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MePutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MePutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MePutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MePutRequestValidationError) ErrorName() string { return "MePutRequestValidationError" }

// Error satisfies the builtin error interface
func (e MePutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMePutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MePutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MePutRequestValidationError{}

// Validate checks the field values on MePutResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MePutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MePutResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MePutResponseMultiError, or
// nil if none found.
func (m *MePutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MePutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Email

	// no validation rules for Name

	if len(errors) > 0 {
		return MePutResponseMultiError(errors)
	}

	return nil
}

// MePutResponseMultiError is an error wrapping multiple validation errors
// returned by MePutResponse.ValidateAll() if the designated constraints
// aren't met.
type MePutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MePutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MePutResponseMultiError) AllErrors() []error { return m }

// MePutResponseValidationError is the validation error returned by
// MePutResponse.Validate if the designated constraints aren't met.
type MePutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MePutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MePutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MePutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MePutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MePutResponseValidationError) ErrorName() string { return "MePutResponseValidationError" }

// Error satisfies the builtin error interface
func (e MePutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMePutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MePutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MePutResponseValidationError{}

// Validate checks the field values on PostsPostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PostsPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostsPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostsPostRequestMultiError, or nil if none found.
func (m *PostsPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PostsPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 3 || l > 50 {
		err := PostsPostRequestValidationError{
			field:  "Title",
			reason: "value length must be between 3 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetContent()); l < 3 || l > 500 {
		err := PostsPostRequestValidationError{
			field:  "Content",
			reason: "value length must be between 3 and 500 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for XId

	if len(errors) > 0 {
		return PostsPostRequestMultiError(errors)
	}

	return nil
}

// PostsPostRequestMultiError is an error wrapping multiple validation errors
// returned by PostsPostRequest.ValidateAll() if the designated constraints
// aren't met.
type PostsPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostsPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostsPostRequestMultiError) AllErrors() []error { return m }

// PostsPostRequestValidationError is the validation error returned by
// PostsPostRequest.Validate if the designated constraints aren't met.
type PostsPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostsPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostsPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostsPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostsPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostsPostRequestValidationError) ErrorName() string { return "PostsPostRequestValidationError" }

// Error satisfies the builtin error interface
func (e PostsPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostsPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostsPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostsPostRequestValidationError{}

// Validate checks the field values on PostsPostResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PostsPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostsPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostsPostResponseMultiError, or nil if none found.
func (m *PostsPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PostsPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for CreatorId

	if len(errors) > 0 {
		return PostsPostResponseMultiError(errors)
	}

	return nil
}

// PostsPostResponseMultiError is an error wrapping multiple validation errors
// returned by PostsPostResponse.ValidateAll() if the designated constraints
// aren't met.
type PostsPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostsPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostsPostResponseMultiError) AllErrors() []error { return m }

// PostsPostResponseValidationError is the validation error returned by
// PostsPostResponse.Validate if the designated constraints aren't met.
type PostsPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostsPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostsPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostsPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostsPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostsPostResponseValidationError) ErrorName() string {
	return "PostsPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PostsPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostsPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostsPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostsPostResponseValidationError{}

// Validate checks the field values on PostsMeGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PostsMeGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostsMeGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostsMeGetRequestMultiError, or nil if none found.
func (m *PostsMeGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PostsMeGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for XId

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostsMeGetRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostsMeGetRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostsMeGetRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PostsMeGetRequestMultiError(errors)
	}

	return nil
}

// PostsMeGetRequestMultiError is an error wrapping multiple validation errors
// returned by PostsMeGetRequest.ValidateAll() if the designated constraints
// aren't met.
type PostsMeGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostsMeGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostsMeGetRequestMultiError) AllErrors() []error { return m }

// PostsMeGetRequestValidationError is the validation error returned by
// PostsMeGetRequest.Validate if the designated constraints aren't met.
type PostsMeGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostsMeGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostsMeGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostsMeGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostsMeGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostsMeGetRequestValidationError) ErrorName() string {
	return "PostsMeGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PostsMeGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostsMeGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostsMeGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostsMeGetRequestValidationError{}

// Validate checks the field values on PostsMeGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostsMeGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostsMeGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostsMeGetResponseMultiError, or nil if none found.
func (m *PostsMeGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PostsMeGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PostsMeGetResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PostsMeGetResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PostsMeGetResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostsMeGetResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostsMeGetResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostsMeGetResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PostsMeGetResponseMultiError(errors)
	}

	return nil
}

// PostsMeGetResponseMultiError is an error wrapping multiple validation errors
// returned by PostsMeGetResponse.ValidateAll() if the designated constraints
// aren't met.
type PostsMeGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostsMeGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostsMeGetResponseMultiError) AllErrors() []error { return m }

// PostsMeGetResponseValidationError is the validation error returned by
// PostsMeGetResponse.Validate if the designated constraints aren't met.
type PostsMeGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostsMeGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostsMeGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostsMeGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostsMeGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostsMeGetResponseValidationError) ErrorName() string {
	return "PostsMeGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PostsMeGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostsMeGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostsMeGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostsMeGetResponseValidationError{}

// Validate checks the field values on PostsMeGetResponse_Post with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostsMeGetResponse_Post) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostsMeGetResponse_Post with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostsMeGetResponse_PostMultiError, or nil if none found.
func (m *PostsMeGetResponse_Post) ValidateAll() error {
	return m.validate(true)
}

func (m *PostsMeGetResponse_Post) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for CreatorId

	if len(errors) > 0 {
		return PostsMeGetResponse_PostMultiError(errors)
	}

	return nil
}

// PostsMeGetResponse_PostMultiError is an error wrapping multiple validation
// errors returned by PostsMeGetResponse_Post.ValidateAll() if the designated
// constraints aren't met.
type PostsMeGetResponse_PostMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostsMeGetResponse_PostMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostsMeGetResponse_PostMultiError) AllErrors() []error { return m }

// PostsMeGetResponse_PostValidationError is the validation error returned by
// PostsMeGetResponse_Post.Validate if the designated constraints aren't met.
type PostsMeGetResponse_PostValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostsMeGetResponse_PostValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostsMeGetResponse_PostValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostsMeGetResponse_PostValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostsMeGetResponse_PostValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostsMeGetResponse_PostValidationError) ErrorName() string {
	return "PostsMeGetResponse_PostValidationError"
}

// Error satisfies the builtin error interface
func (e PostsMeGetResponse_PostValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostsMeGetResponse_Post.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostsMeGetResponse_PostValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostsMeGetResponse_PostValidationError{}
