// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gormgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/aqaurius6666/clean-go/internal/entities"
)

func newReact(db *gorm.DB, opts ...gen.DOOption) react {
	_react := react{}

	_react.reactDo.UseDB(db, opts...)
	_react.reactDo.UseModel(&entities.React{})

	tableName := _react.reactDo.TableName()
	_react.ALL = field.NewAsterisk(tableName)
	_react.UserID = field.NewString(tableName, "user_id")
	_react.PostID = field.NewString(tableName, "post_id")
	_react.Type = field.NewString(tableName, "type")
	_react.User = reactBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "entities.User"),
	}

	_react.Post = reactBelongsToPost{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Post", "entities.Post"),
		Creator: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Post.Creator", "entities.User"),
		},
	}

	_react.fillFieldMap()

	return _react
}

type react struct {
	reactDo

	ALL    field.Asterisk
	UserID field.String
	PostID field.String
	Type   field.String
	User   reactBelongsToUser

	Post reactBelongsToPost

	fieldMap map[string]field.Expr
}

func (r react) Table(newTableName string) *react {
	r.reactDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r react) As(alias string) *react {
	r.reactDo.DO = *(r.reactDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *react) updateTableName(table string) *react {
	r.ALL = field.NewAsterisk(table)
	r.UserID = field.NewString(table, "user_id")
	r.PostID = field.NewString(table, "post_id")
	r.Type = field.NewString(table, "type")

	r.fillFieldMap()

	return r
}

func (r *react) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *react) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 5)
	r.fieldMap["user_id"] = r.UserID
	r.fieldMap["post_id"] = r.PostID
	r.fieldMap["type"] = r.Type

}

func (r react) clone(db *gorm.DB) react {
	r.reactDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r react) replaceDB(db *gorm.DB) react {
	r.reactDo.ReplaceDB(db)
	return r
}

type reactBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a reactBelongsToUser) Where(conds ...field.Expr) *reactBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a reactBelongsToUser) WithContext(ctx context.Context) *reactBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a reactBelongsToUser) Model(m *entities.React) *reactBelongsToUserTx {
	return &reactBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type reactBelongsToUserTx struct{ tx *gorm.Association }

func (a reactBelongsToUserTx) Find() (result *entities.User, err error) {
	return result, a.tx.Find(&result)
}

func (a reactBelongsToUserTx) Append(values ...*entities.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a reactBelongsToUserTx) Replace(values ...*entities.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a reactBelongsToUserTx) Delete(values ...*entities.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a reactBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a reactBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type reactBelongsToPost struct {
	db *gorm.DB

	field.RelationField

	Creator struct {
		field.RelationField
	}
}

func (a reactBelongsToPost) Where(conds ...field.Expr) *reactBelongsToPost {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a reactBelongsToPost) WithContext(ctx context.Context) *reactBelongsToPost {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a reactBelongsToPost) Model(m *entities.React) *reactBelongsToPostTx {
	return &reactBelongsToPostTx{a.db.Model(m).Association(a.Name())}
}

type reactBelongsToPostTx struct{ tx *gorm.Association }

func (a reactBelongsToPostTx) Find() (result *entities.Post, err error) {
	return result, a.tx.Find(&result)
}

func (a reactBelongsToPostTx) Append(values ...*entities.Post) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a reactBelongsToPostTx) Replace(values ...*entities.Post) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a reactBelongsToPostTx) Delete(values ...*entities.Post) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a reactBelongsToPostTx) Clear() error {
	return a.tx.Clear()
}

func (a reactBelongsToPostTx) Count() int64 {
	return a.tx.Count()
}

type reactDo struct{ gen.DO }

type IReactDo interface {
	gen.SubQuery
	Debug() IReactDo
	WithContext(ctx context.Context) IReactDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReactDo
	WriteDB() IReactDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReactDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReactDo
	Not(conds ...gen.Condition) IReactDo
	Or(conds ...gen.Condition) IReactDo
	Select(conds ...field.Expr) IReactDo
	Where(conds ...gen.Condition) IReactDo
	Order(conds ...field.Expr) IReactDo
	Distinct(cols ...field.Expr) IReactDo
	Omit(cols ...field.Expr) IReactDo
	Join(table schema.Tabler, on ...field.Expr) IReactDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReactDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReactDo
	Group(cols ...field.Expr) IReactDo
	Having(conds ...gen.Condition) IReactDo
	Limit(limit int) IReactDo
	Offset(offset int) IReactDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReactDo
	Unscoped() IReactDo
	Create(values ...*entities.React) error
	CreateInBatches(values []*entities.React, batchSize int) error
	Save(values ...*entities.React) error
	First() (*entities.React, error)
	Take() (*entities.React, error)
	Last() (*entities.React, error)
	Find() ([]*entities.React, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.React, err error)
	FindInBatches(result *[]*entities.React, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entities.React) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReactDo
	Assign(attrs ...field.AssignExpr) IReactDo
	Joins(fields ...field.RelationField) IReactDo
	Preload(fields ...field.RelationField) IReactDo
	FirstOrInit() (*entities.React, error)
	FirstOrCreate() (*entities.React, error)
	FindByPage(offset int, limit int) (result []*entities.React, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReactDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r reactDo) Debug() IReactDo {
	return r.withDO(r.DO.Debug())
}

func (r reactDo) WithContext(ctx context.Context) IReactDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reactDo) ReadDB() IReactDo {
	return r.Clauses(dbresolver.Read)
}

func (r reactDo) WriteDB() IReactDo {
	return r.Clauses(dbresolver.Write)
}

func (r reactDo) Session(config *gorm.Session) IReactDo {
	return r.withDO(r.DO.Session(config))
}

func (r reactDo) Clauses(conds ...clause.Expression) IReactDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reactDo) Returning(value interface{}, columns ...string) IReactDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reactDo) Not(conds ...gen.Condition) IReactDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reactDo) Or(conds ...gen.Condition) IReactDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reactDo) Select(conds ...field.Expr) IReactDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reactDo) Where(conds ...gen.Condition) IReactDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reactDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IReactDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r reactDo) Order(conds ...field.Expr) IReactDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reactDo) Distinct(cols ...field.Expr) IReactDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reactDo) Omit(cols ...field.Expr) IReactDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reactDo) Join(table schema.Tabler, on ...field.Expr) IReactDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reactDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReactDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reactDo) RightJoin(table schema.Tabler, on ...field.Expr) IReactDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reactDo) Group(cols ...field.Expr) IReactDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reactDo) Having(conds ...gen.Condition) IReactDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reactDo) Limit(limit int) IReactDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reactDo) Offset(offset int) IReactDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reactDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReactDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reactDo) Unscoped() IReactDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reactDo) Create(values ...*entities.React) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reactDo) CreateInBatches(values []*entities.React, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reactDo) Save(values ...*entities.React) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reactDo) First() (*entities.React, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entities.React), nil
	}
}

func (r reactDo) Take() (*entities.React, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entities.React), nil
	}
}

func (r reactDo) Last() (*entities.React, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entities.React), nil
	}
}

func (r reactDo) Find() ([]*entities.React, error) {
	result, err := r.DO.Find()
	return result.([]*entities.React), err
}

func (r reactDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.React, err error) {
	buf := make([]*entities.React, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reactDo) FindInBatches(result *[]*entities.React, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reactDo) Attrs(attrs ...field.AssignExpr) IReactDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reactDo) Assign(attrs ...field.AssignExpr) IReactDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reactDo) Joins(fields ...field.RelationField) IReactDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reactDo) Preload(fields ...field.RelationField) IReactDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reactDo) FirstOrInit() (*entities.React, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entities.React), nil
	}
}

func (r reactDo) FirstOrCreate() (*entities.React, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entities.React), nil
	}
}

func (r reactDo) FindByPage(offset int, limit int) (result []*entities.React, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reactDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reactDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reactDo) Delete(models ...*entities.React) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reactDo) withDO(do gen.Dao) *reactDo {
	r.DO = *do.(*gen.DO)
	return r
}
