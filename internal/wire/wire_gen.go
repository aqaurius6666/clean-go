// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"context"
	"github.com/aqaurius6666/clean-go/internal/config"
	"github.com/aqaurius6666/clean-go/internal/repositories"
	"github.com/aqaurius6666/clean-go/internal/restapi"
	"github.com/aqaurius6666/clean-go/internal/restapi/v1"
	"github.com/aqaurius6666/clean-go/internal/usecases"
	"github.com/gin-gonic/gin"
)

// Injectors from wire.go:

func BuildApp(ctx context.Context, cfg config.AppConfig) (*App, error) {
	engine := gin.New()
	logConfig := cfg.Log
	logger := config.NewLogger(logConfig)
	authConfig := cfg.Auth
	dbConfig := cfg.Db
	repositoryImpl, err := repositories.BuildRepository(logger, dbConfig)
	if err != nil {
		return nil, err
	}
	repository := CastRepository(repositoryImpl)
	usecasesService := &usecases.UsecasesService{
		Logger:     logger,
		AuthConfig: authConfig,
		Repo:       repository,
	}
	handler := &v1.Handler{
		Usecase: usecasesService,
	}
	middleware := &v1.Middleware{
		L:        logger,
		Usecases: usecasesService,
	}
	restAPIServer := &restapi.RestAPIServer{
		G:          engine,
		Logger:     logger,
		Handler:    handler,
		Middleware: middleware,
	}
	migrator := CastMigrator(repositoryImpl)
	app := &App{
		RestApiServer: restAPIServer,
		Migrator:      migrator,
	}
	return app, nil
}

// wire.go:

type App struct {
	RestApiServer restapi.Server
	Migrator      usecases.Migrator
}
