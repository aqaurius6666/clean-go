// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"context"
	"github.com/aqaurius6666/clean-go/internal/config"
	"github.com/aqaurius6666/clean-go/internal/generics"
	"github.com/aqaurius6666/clean-go/internal/repositories/orm"
	"github.com/aqaurius6666/clean-go/internal/restapi"
	"github.com/aqaurius6666/clean-go/internal/restapi/v1"
	"github.com/aqaurius6666/clean-go/internal/usecases"
	"github.com/gin-gonic/gin"
)

// Injectors from app_wire.go:

func BuildApp(ctx context.Context, cfg config.AppConfig) (*App, error) {
	engine := gin.New()
	dbConfig := cfg.Db
	db, err := orm.ConnectGorm(dbConfig)
	if err != nil {
		return nil, err
	}
	ormRepository := &orm.ORMRepository{
		DB: db,
	}
	usecasesService := &usecases.UsecasesService{
		Repo: ormRepository,
	}
	handler := &v1.Handler{
		Usecase: usecasesService,
	}
	ormGenericRepository := generics.NewUserGenericRepository(db)
	genericHandler := NewUserHandler(ormGenericRepository)
	middleware := &v1.Middleware{}
	restAPIServer := &restapi.RestAPIServer{
		G:           engine,
		Handler:     handler,
		UserHandler: genericHandler,
		Middleware:  middleware,
	}
	app := &App{
		RestApiServer: restAPIServer,
		Migrator:      ormRepository,
	}
	return app, nil
}

// app_wire.go:

type App struct {
	RestApiServer restapi.Server
	Migrator      usecases.Migrator
}
